{
  "hash": "54bcab31fef36e7532fa06231ac45eae",
  "result": {
    "markdown": "---\ntitle: \"Technical Computing\"\neditor: visual\nengine: knitr\n---\n\n\n> Underneath, it's the 1970s, UNIX, and the command-line.\n>\n> Technical computing is deeply frustrating. And yet it's weirdly satisfying once you get to subdue the machine and get it to do your will.\n>\n> All of these tools are about controlling the process.\n\n<https://missing.csail.mit.edu/>\n\n**UNIX tools:**\n\n::: callout-note\nWindows:\n\n-   [git bash](https://git-scm.com/downloads)\n\n-   [cygwin](https://www.cygwin.com/)\n:::\n\nError music video\n\n**Exercises:**\n\n-   unzip a docx file\n\n**The File System**\n\ncopy picture of filing cbinet; copy picture of file system hierarchy\n\n::: grid\n::: g-col-6\n**Office Model**\n\n-   Formatted documents are real.\n\n-   Intermediate outputs are cut and pasted into documents.\n\n-   Changes are tracked inside files.\n\n-   Final output is often in the same format you've been working in, e.g.Â a Word file, or a PDF.\n:::\n\n::: g-col-6\n**Engineering model**\n\n-   Plain-text files are real.\n\n-   Intermediate outputs are produced via code, often inside documents.\n\n-   Changes are tracked outside files, at the level of a project.\n\n-   Final outputs are assembled programatically and converted to some desired format.\n:::\n:::\n\n**The Unix way of thinking**\n\n*Why is it good to think of things as a collection o files?*\n\nThe Unix conception of a \"file\" is very flexible. Everything is a file---e.g., connections to other computers or processes can act like files.\n\nUnix commands are often *composable* using *pipes* (`|`)\n\nNavigating the tree.\n\n-   `whoami`: Who am I?\n\n-   `pwd`: Where am I?\n\n-   `ls`: What is in here?\n\nOther commands:\n\n-   Basic file-handling commands such as `cp` (copy), `mv` (move or rename), `rm` (remove or delete), and `chmod` (change file permissions)\n\n-   Basic file-viewing commands such as `cat` (view an entire file) and `less` (view one page at a time)\n\n-   Basic directory commands such as `cd` (change directory), ls (list files in a directory), `mkdir` (create directory), `rmdir` (remove directory), and `pwd` (display your current directory name)\n\n-   The basics of shell scripts: storing Linux commands in a file, making the file executable (with `chmod 755` or `chmod +x`), and running the file\n\n-   Viewing Linux's built-in documentation, known as manpages, with the `man` command (example: `man cat` displays documentation on the `cat` command)\n\n**Command Interpreter**\n\nA shell is an *interpreter*. It waits for commands. When you supply them, it does what you tell it.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho \"hello there\"\npwd\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nhello there\n/Users/acastroaraujo/Documents/Repositories/stats_bb\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}